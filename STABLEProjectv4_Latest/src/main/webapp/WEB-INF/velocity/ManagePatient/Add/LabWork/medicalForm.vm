<?xml version="1.0" encoding="UTF-8"?>
<Template>
	#set($dateTool = $flowRequestContext.flowScope.dateTool)
	#set($encounterTestList =	$flowRequestContext.flowScope.patient.encounters)
	#set($order= $flowRequestContext.flowScope.selectedOrder)
	#set($viewName=$flowRequestContext.flowScope.viewName)
	#set($encounterDate=$dateTool.parseLong($encounter.encounterDate))
	#set($classLoader=$flowRequestContext.flowScope.classLoader)
	#set($arrayUtil=$classLoader.forName("java.util.Arrays"))	
	#set($measurementList =	$flowRequestContext.flowScope.staticMeasurements)		
	<flowExecutionUrl>$flowExecutionUrl</flowExecutionUrl>
	<flowExecutionKey>$flowExecutionKey</flowExecutionKey>
	<View name="$viewName">
		<measurmentList>
			#foreach($measurement in $measurementList)
				<measurement>
						<deviceType>$measurement.defineMeasurementType().toString()</deviceType>
						<measurementValue>$measurement.value</measurementValue>
				</measurement>
			#end
    	</measurmentList>   	
		<testList>
			<test>			
			<date>
				$dateTool.format("MM-dd-yyyy",$encounterDate)
		    </date>
			<hour>$dateTool.format("HH",$encounterDate)</hour>
			<min>$dateTool.format("mm",$encounterDate)</min>
			#if($order.class.name=="org.stable.sdk.model.test.CBC")
			<name>CBC</name>
	 		<measurementList>
					<measurement>
						<deviceType>$order.wbc_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.wbc_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.hgb_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.hgb_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.hct_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.hct_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.plts_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.plts_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.neutrophils_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.neutrophils_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.bands_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.bands_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.metamyelocytes_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.metamyelocytes_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.lymphs_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.lymphs_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.basos_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.basos_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.eos_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.eos_Measurement.value</measurementValue>
					</measurement>			
				</measurementList>
	 			#elseif($order.class.name=="org.stable.sdk.model.test.CRP")
		 			<name>CRP</name>	
			 		<measurementList>
		 				<measurement>
							<deviceType>$order.c_Reactive_Protein_measurement.defineMeasurementType().toString()</deviceType>
							<methodType>TEST</methodType>
							<measurementValue>$order.c_Reactive_Protein_measurement.value</measurementValue>
						</measurement>
					</measurementList>
			 	#elseif($order.class.name=="org.stable.sdk.model.test.Clotting")
						<name>CS</name>
						<measurementList>
							<measurement>
								<deviceType>$order.prothrombin_measurement.defineMeasurementType().toString()</deviceType>
								<methodType>TEST</methodType>
								<measurementValue>$order.prothrombin_measurement.value</measurementValue>
							</measurement>
							<measurement>
								<deviceType>$order.thromboplastin_measurement.defineMeasurementType().toString()</deviceType>
								<methodType>TEST</methodType>
								<measurementValue>$order.thromboplastin_measurement.value</measurementValue>
							</measurement>
							<measurement>
								<deviceType>$order.fibrinogen_measurement.defineMeasurementType().toString()</deviceType>
								<methodType>TEST</methodType>
								<measurementValue>$order.fibrinogen_measurement.value</measurementValue>
							</measurement>
						</measurementList>							
				#elseif($order.class.name=="org.stable.sdk.model.test.Electrolytes")
			 		<name>ELEC</name>
					<measurementList>
					<measurement>
						<deviceType>$order.na_measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.na_measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.k_measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.k_measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.cl_measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.cl_measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.co2_measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.co2_measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.totalcalcium_measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.totalcalcium_measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.ionizedcalcium_measurement.defineMeasurementType().toString()</deviceType>
						<methodType>TEST</methodType>
						<measurementValue>$order.ionizedcalcium_measurement.value</measurementValue>
					</measurement>
				</measurementList>		
				#elseif($order.class.name=="org.stable.sdk.model.test.BloodGas")
					<name>BG</name>
					<measurementList>
					#set($phMethodList=$arrayUtil.asList($classLoader.forName("org.stable.sdk.model.measurement.vitalsigns.pHlevel.pHLevel_Method_Type").values()))
					#set($pCO2MethodList=$arrayUtil.asList($classLoader.forName("org.stable.sdk.model.measurement.vitalsigns.pco2.PCO2_Method_Type").values()))
					#set($pO2MethodList=$arrayUtil.asList($classLoader.forName("org.stable.sdk.model.measurement.labwork.bloodgas.PO2.PO2_Method_Type").values()))
					#set($hCO3MethodList=$arrayUtil.asList($classLoader.forName("org.stable.sdk.model.measurement.vitalsigns.hco3.HCO3_Method_Type").values()))
					#set($baseMethodList=$arrayUtil.asList($classLoader.forName("org.stable.sdk.model.measurement.airway.baseexcess.BaseExcess_Method_Type").values()))
					#set($metHbList=$arrayUtil.asList($classLoader.forName("org.stable.sdk.model.measurement.labwork.bloodgas.MetHb.MetHb_Method_Type").values()))															
					<measurement>
						<deviceType>$order.pHLevel_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>$pO2MethodList.get($order.pco2_Measurement.methodType)</methodType>
						<measurementValue>$order.pHLevel_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.pco2_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>$pO2MethodList.get($order.pco2_Measurement.methodType)</methodType>
						<measurementValue>$order.pco2_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.po2_measurment.defineMeasurementType().toString()</deviceType>
						<methodType>$pO2MethodList.get($order.pco2_Measurement.methodType)</methodType>
						<measurementValue>$order.po2_measurment.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.hco3_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>$pO2MethodList.get($order.pco2_Measurement.methodType)</methodType>
						<measurementValue>$order.hco3_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.baseExcess_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>$pO2MethodList.get($order.pco2_Measurement.methodType)</methodType>
						<measurementValue>$order.baseExcess_Measurement.value</measurementValue>
					</measurement>
					<measurement>
						<deviceType>$order.metHb_Measurement.defineMeasurementType().toString()</deviceType>
						<methodType>$pO2MethodList.get($order.pco2_Measurement.methodType)</methodType>
						<measurementValue>$order.metHb_Measurement.value</measurementValue>
					</measurement>
				</measurementList>					
		 		#end			
		 	</test>			
		</testList>
	</View>
</Template>