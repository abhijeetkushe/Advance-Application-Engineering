<?xml version="1.0" encoding="utf-8"?>
<views2:vTask xmlns:fx="http://ns.adobe.com/mxml/2009"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:views2="views.*"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:components="components.*"
			  color="#3D3838" creationComplete="vtask1_creationCompleteHandler(event)" actionBarVisible="false">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.ToolTipManager;
			import mx.skins.halo.ToolTipBorder;
			
			[Bindable]
			private var obj:Object=new Object();
			
			
			[Bindable]
			private var testList:XMLList = new XMLList();
			
			[Bindable]
			private var hourList:ArrayCollection= new ArrayCollection(
				['00','01',"02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23"]);
			[Bindable]
			private var minList:ArrayCollection = new ArrayCollection( 
				['00','01','02',"03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"
					,'25','26',"27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"
					,'49','50',"51","52","53","54","55","56","57","58","59"]);
			
			[Bindable]
			private var reportPage:Boolean=false; 
			
			
			public override function getOutputVariables():URLVariables{
				var urlVariables:URLVariables = new URLVariables();
				urlVariables.patientId="52";
				urlVariables.encounterDate=date.text+" "+hour.text+":"+min.text;
				urlVariables.CBC="true";
				for(var i:int  =1;i<11;i++){
					var tempText:TextInput=this["measurementId"+i] as TextInput;
					urlVariables[tempText.name]=tempText.text;
				}
				
				/* var xmlIp:String=new String();
				xmlIp+="<person>"+
				"<personId>"+0+"</personId>"+
				"<patientProfile>"+
				"<patientId>"+0+"</patientId>"+   
				"</patientProfile>"+
				"<doctor>"+
				"<doctorId>"+0+"</doctorId>"+
				"</doctor>"+
				"<testList>"+
				"<test>"+
				"<name>CBC</name>"+                             
				"<date>"+date.text+"</date>"+
				"<hour>"+hour.text+"</hour>"+
				"<min>"+min.text+"</min>"+
				"<measurementList>";
				
				for(var i:int  =1;i<11;i++){
				var tempText:TextInput=this["measurementId"+i] as TextInput;
				xmlIp+="<measurement>"+
				"<deviceType>"+tempText.name+"</deviceType>"+
				"<methodType>TEST</methodType>"+
				"<measurementValue>"+tempText.text+"</measurementValue>"+
				"</measurement>";
				}
				
				xmlIp+="</measurementList></test></testList></person>";
				urlVariables.xmlInput=xmlIp; */
				return urlVariables;				
			}
			
			
			protected function vtask1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				if(inputVariables!=null )
				{					
					testList=inputVariables.testList.test;
					if(testList!=null && testList.length()>0)
					{
						for each(var test:Object in testList)
						{
							if(test.name=="CBC"){
								ttubeButton.visible=true;
								manroeButton.visible=true;
								obj=test;
								date.text=obj.date;
								var i:int=1;
								for each(var object:Object in obj.measurementList.measurement)
								{
									reportPage=true;
									var tempText:TextInput=null;
									tempText=this["measurementId"+i] as TextInput;
									tempText.text=object.measurementValue;
									i++;
								}
							}	
						}
					}	
				}
				
				
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				if(validateForm()){
					nextPageHandler('enterMedicalReport');
					Alert.show("The record has been added");
				}			
			}
			
			private function validateForm():Boolean{
				var returnVal:Boolean=true;
				for(var i:int=1;i<11;i++){
					var obj:Object=this["measurementId"+i];
					if(i<3){
						if(validateObjectCount(obj))
						{
							continue ;
						}
						else {
							return false;
						}
					}else{
						if(validNumberObject(obj)){
							continue;
						}else {
							return false;
						}
					}
					
				}
				var obj:Object=this['date'];
				if(dateObject_focusOutHandler(obj)){
					return true;
				}
				else{
					return false;
				}
				return returnVal;
			}
			
			
			
			protected function ttubeButton_clickHandler(event:MouseEvent):void
			{
				var testTubeXml:String="<View><testList>"+
					"<test>"+
					"<name>CBC</name>"+
					"<measurementList>";
				for(var i:int  =1;i<11;i++){
					var tempText:TextInput=this["measurementId"+i] as TextInput;
					testTubeXml+="<measurement>"+
						"<deviceType>"+tempText.name+"</deviceType>"+
						"<methodType>MANUAL</methodType>"+
						"<measurementValue>"+tempText.text+"</measurementValue>"+
						"</measurement>";
				}
				testTubeXml+="</measurementList></test></testList></View>";
				this.taskmanager.loadClass('TestTube',new XMLList(testTubeXml));
				
			}
			
			protected function validateCount(event:FocusEvent):void{
				
				var obj:Object=event.currentTarget;
				if(isFieldEntered(obj)){
					validateObjectCount(obj);
				}
			}
			
			
			protected function validNumbers(event:FocusEvent):void
			{
				var obj:Object=event.currentTarget;
				if(isFieldEntered(obj)){
					validNumberObject(obj);
				}
			}
			
			protected function date_focusOutHandler(event:FocusEvent):void
			{
				var obj:Object=event.currentTarget;
				if(isFieldEntered(obj)){
					dateObject_focusOutHandler(obj);
				}
			}			
			
			protected function validateObjectCount(object:Object):Boolean{
				
				if(isFieldEntered(object)){
					genNumber.source=object;
					genNumber.property="text";
					var varresult:ValidationResultEvent=null;
					varresult=genNumber.validate();
					if(varresult.type==ValidationResultEvent.INVALID){
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=true;
						img.myError="Please enter the field in Number[XX.xx]";
						var errorTip:ToolTip=new ToolTip();
						errorTip.x=object.parent.x+object.x;
						errorTip.y=((object.parent.y))+object.y;
						img.errorTip=errorTip;
						errorMessageFormFields.visible=true;
						
						return false;
					}
					else{
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=false;
						object.errorString=null;
						if(isFormValid()){
							errorMessageFormFields.visible=false;
						}	
						return true;
					}
				}
				else{
					return false;	
				}
				return true;
			}
			
			
			private function isFormValid():Boolean{
				
				for(var i:int=1;i<11;i++){
					var tempText:TextInput=this["measurementId"+i] as TextInput;
					if(tempText.errorString=="Error"){
						return false;
					}
					
				}
				var tempDate:DateField=this["date"] as DateField;
				if(tempDate.errorString!=null){
					return false;	
				}
				return true;
			}
			
			protected function isFieldEntered(object:Object):Boolean{
				
				requiredValidator.source=object;
				requiredValidator.property="text";
				var varresult:ValidationResultEvent=null; 
				varresult=requiredValidator.validate();
				if(varresult.type==ValidationResultEvent.INVALID){
					var img:gifImage= this[object.name+'Error'] as gifImage;
					img.visible=true;
					errorMessageFormFields.visible=true;
					object.errorString="Error";
					
					img.myError="Please enter the required Field";
					var errorTip:ToolTip=new ToolTip();
					errorTip.x=object.parent.x+object.x;
					errorTip.y=((object.parent.y))+object.y;
					img.errorTip=errorTip;
					
					/* 					errorTip.height=50; */
					
					
					return false;
				}else{
					var img:gifImage= this[object.name+'Error'] as gifImage;
					img.visible=false;
					object.errorString=null;
					if(isFormValid()){
						errorMessageFormFields.visible=false;
					}	
					return true;
				}
				return true;
			}
			
			protected function validNumberObject(object:Object):Boolean{
				
				if(isFieldEntered(object)){
					percentValidator.source=object;
					percentValidator.property="text";
					var varresult:ValidationResultEvent=null;
					varresult=percentValidator.validate();
					if(varresult.type==ValidationResultEvent.INVALID)
					{
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=true;
						object.errorString="Error";
						img.myError="Please enter the value in percentage[00.00-100.00]";
						var errorTip:ToolTip=new ToolTip();
						errorTip.x=object.parent.x+object.x;
						errorTip.y=((object.parent.y))+object.y;
						img.errorTip=errorTip;	
						errorTip.width=160;
						errorMessageFormFields.visible=true;
						return false;
					}else if(varresult.type==ValidationResultEvent.VALID){
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=false;
						object.errorString=null;
						if(isFormValid()){
							errorMessageFormFields.visible=false;
						}	
						return true;
					}
					
				}
				else{
					return false;
				} 
				return true;
			}
			
			
			
			
			protected function dateObject_focusOutHandler(object:Object):Boolean
			{
				
				if(isFieldEntered(object)){
					dateValidator.source=object;
					dateValidator.property="text";
					var varresult:ValidationResultEvent=null;
					varresult=dateValidator.validate();
					if(varresult.type==ValidationResultEvent.INVALID){
						var date:DateField= object as DateField;
						date.toolTip="Please enter the date in MM-dd-YYYY format";
						object.errorString="Error";
						
						return false;
					}else if(varresult.type==ValidationResultEvent.VALID){
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=false;
						object.errorString=null;
						if(isFormValid()){
							errorMessageFormFields.visible=false;
						}
						return true;
					}
					
				}
				return true;
			}
			
			
			protected function mouseOverHandler(event:MouseEvent):void
			{
				var obj:gifImage=event.currentTarget as gifImage;
				obj.errorTip = ToolTipManager.createToolTip(
					obj.myError, obj.errorTip.x, obj.errorTip.y) as ToolTip; 
				obj.errorTip.setStyle("styleName", "errorTip");
				
				/* errorTip.height=50;
				errorTip.width=130; */
				
				// TODO Auto-generated method stub
			}
			
			
			protected function mouseOutHandler(event:MouseEvent):void
			{
				var obj:gifImage=event.currentTarget as gifImage;
				ToolTipManager.destroyToolTip(obj.errorTip);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<mx:NumberValidator id="genNumber" triggerEvent="" precision="2"></mx:NumberValidator>	
		<mx:StringValidator id="requiredValidator"/>
		<mx:NumberValidator id="percentValidator" minValue="0" maxValue="100" precision="2"/>
		<mx:DateValidator id="dateValidator" inputFormat="mm-dd-yyyy" allowedFormatChars="-" />
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="480" height="100%">
		<s:fill>
			<s:SolidColor color="#000000"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect x="11" y="24" width="459" height="693" radiusX="20" radiusY="20">
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Rect>
	<components:gifImage id="dateError" x="242" y="134" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" renderedAsImg="false" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="HgbError" x="402" y="224" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="HctError" x="402" y="264" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="PLTSError" x="402" y="308" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="NEUTROPHILSError" x="402" y="348" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="METAMYELOCYTESError" x="402" y="425" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="LYMPHSError" x="402" y="460" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="BASOSError" x="402" y="494" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="EOSError" x="402" y="532" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="BANDSError" x="402" y="385" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<s:Button id="ttubeButton" x="126" y="571" width="108" height="49" label="TEST TUBE" chromeColor="#EDECEC"
			  click="ttubeButton_clickHandler(event)" color="#080808" fontFamily="Arial" fontSize="12" visible="true"/>
	<!--<s:TextInput name="WBC"  id="measurementId1" x="244" y="177" width="95" height="35" contentBackgroundColor="#FFFFFF"
	fontFamily="Arial" focusOut="validateCount(event)" toolTip="Testing testing"/>-->
	
	<s:HGroup x="10" y="180" width="460">
		<s:Label text="White Blood Cell Count:"/>
		<s:TextInput id="measurementId1" x="246" y="180" width="91" height="30" color="0x000000"
					 contentBackgroundColor="0xFFFFFF" focusColor="0xF87000"
					 focusOut="validateCount(event)" focusThickness="3" fontWeight="normal" name="WBC"
					 textAlign="left"/>
		<s:Label x="345" y="188" color="#000000" text="K/uL"/>
		<components:gifImage id="WBCError" x="401" y="183" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif"  visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	</s:HGroup>
	
	<s:TextInput name="Hgb" id="measurementId2" x="245" y="217" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validateCount(event)"/>
	<s:Label x="30" y="347" width="211" height="35" text="Segmented Neutrophils (segs):"/>
	<s:TextInput name="NEUTROPHILS" id="measurementId3" x="249" y="336" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)"/>
	<s:Label x="30" y="390" text="Band Neutrophils (band):"/>
	<s:TextInput name="BANDS" id="measurementId4" x="250" y="373" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)"/>
	<s:Label x="30" y="429" text="Metamyelocytes:"/>
	<s:TextInput name="METAMYELOCYTES" id="measurementId5" x="250" y="412" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)"/>
	<s:Label x="30" y="465" text="Lymphocytes"/>
	<s:TextInput name="LYMPHS" id="measurementId6" x="249" y="452" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)"/>
	<s:Label x="30" y="537" text="Eosinophils:"/>
	<s:TextInput name="EOS" id="measurementId7" x="249" y="524" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)" />
	<s:Label x="30" y="501" text="Basophils:"/>
	<s:TextInput name="BASOS" id="measurementId8" x="249" y="488" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)" />
	<s:Label x="350" y="346" color="#000000" text="%"/>
	<s:Label x="349" y="383" color="#000000" text="%"/>
	<s:Label x="353" y="422" color="#000000" text="%"/>
	<s:Label x="351" y="459" color="#000000" text="%"/>
	<s:Label x="351" y="493" color="#000000" text="%"/>
	<s:Label x="351" y="531" color="#000000" text="%"/>
	
	<s:Label x="31" y="235" text="Hgb:"/>
	
	<s:Label x="343" y="225" color="#000000" text="g/dL"/>
	<s:Label x="31" y="265" text="Hct:"/>
	<s:TextInput name="Hct" id="measurementId9" x="247" y="257" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)"/>
	<s:Label x="346" y="266" color="#000000" text="%"/>
	<s:Label x="31" y="308" text="PLTS:"/>
	<s:TextInput name="PLTS" id="measurementId10" x="248" y="297" width="94" height="35" contentBackgroundColor="#FFFFFF"
				 fontFamily="Arial" focusOut="validNumbers(event)"/>
	<s:Label x="347" y="306" color="#000000" text="%"/>
	<s:Button id="manroeButton" x="244" y="571" width="103" height="49" label="MANROE" chromeColor="#EDECEC"
			  click="nextPageHandler('manroe');" color="#080808" fontFamily="Arial" fontSize="12" visible="true"/>
	<s:Label x="27" y="133" color="#3D3838" fontSize="15" fontStyle="normal"
			 text="Date:" />
	<s:Label x="283" y="133" height="19" color="#3D3838" fontSize="15" fontStyle="normal" text="Time:" />
	<mx:ComboBox x="335" y="124" width="60" height="32" chromeColor="#FFFFFF"
				 contentBackgroundColor="#FFFFFF" dataProvider="{hourList}" text="{obj.hour}"  selectedIndex="0" id="hour" />
	<mx:ComboBox  x="403" y="124" width="60" height="32" chromeColor="#FFFFFF" 
				  contentBackgroundColor="#FFFFFF" dataProvider="{minList}" text="{obj.min}" selectedIndex="0" id="min"/>
	<mx:DateField name="date" id="date" x="79" y="128" width="163" contentBackgroundColor="#FFFFFF"
				  formatString="MM-DD-YYYY" focusOut="date_focusOutHandler(event)" />
	<mx:MenuBar x="27" y="21" width="426" height="82" chromeColor="#0F0E0E"
				click="nextPageHandler('babyTests');" color="#FBFBFD" cornerRadius="0"
				selectionColor="#FFFFFF"></mx:MenuBar>
	
	<s:Label x="170" y="46" color="#FCFCFC" fontFamily="Arial" fontSize="22" text="Complete Blood Count"/>
	<s:Image x="46" y="32" width="52" height="47" source="../assets/downicon.jpg"/>
	<components:BackButton x="23" y="571" width="94" height="49" click="nextPageHandler('back');"/>
	<components:SubmitButton x="355" y="573" width="103" height="47" 
							 click="button2_clickHandler(event);"/>
	
	
	<!--	<components:gifImage  id="errorMessageImage" x="287" y="101" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false"/>-->
	
	<s:Label id="errorMessageFormFields" x="27" y="107" color="#FF0202" fontSize="14" text="Invalid/Incomplete data has been entered" visible="false"/>
</views2:vTask>