<?xml version="1.0" encoding="utf-8"?>
<views2:vTask xmlns:fx="http://ns.adobe.com/mxml/2009"
			  xmlns:s="library://ns.adobe.com/flex/spark"
			  xmlns:views2="views.*"
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:components="components.*"
			  creationComplete="vtask1_creationCompleteHandler(event)" actionBarVisible="false">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.controls.ToolTip;
			import mx.managers.ToolTipManager;
			import mx.skins.halo.ToolTipBorder;
			
			[Bindable]
			private var obj:Object=new Object();
			
			
			[Bindable]
			private var testList:XMLList = new XMLList();
			
			[Bindable]
			private var hourList:ArrayCollection= new ArrayCollection(
				['00','01',"02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23"]);
			[Bindable]
			private var minList:ArrayCollection = new ArrayCollection( 
				['00','01','02',"03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"
					,'25','26',"27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"
					,'49','50',"51","52","53","54","55","56","57","58","59"]);
			
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				Alert.show("The record has been added");
				nextPageHandler('enterMedicalReport');
				// TODO Auto-generated method stub
			}
			
			/* public override function getOutputVariables():URLVariables{
			var urlVariables:URLVariables = new URLVariables();
			var xmlIp:String=new String();
			xmlIp+="<person>"+
			"<personId>"+0+"</personId>"+
			"<patientProfile>"+
			"<patientId>"+0+"</patientId>"+   
			"</patientProfile>"+
			"<doctor>"+
			"<doctorId>"+0+"</doctorId>"+
			"</doctor>"+
			"<testList>"+
			"<test>"+
			"<name>ELEC</name>"+                             
			"<date>"+date.text+"</date>"+
			"<hour>"+hour.text+"</hour>"+
			"<min>"+min.text+"</min>"+
			"<measurementList>";
			for(var i:int  =1;i<4;i++){
			var tempText:TextInput=this["measurementId"+i] as TextInput;
			xmlIp+="<measurement>"+
			"<deviceType>"+tempText.name+"</deviceType>"+
			"<methodType>TEST</methodType>"+
			"<measurementValue>"+tempText.text+"</measurementValue>"+
			"</measurement>";
			}
			
			xmlIp+="</measurementList></test></testList></person>";
			urlVariables.xmlInput=xmlIp;
			return urlVariables;				
			}
			*/
			
			
			public override function getOutputVariables():URLVariables{
				var urlVariables:URLVariables = new URLVariables();
				urlVariables.elec="true";
				urlVariables.patientId="51";
				urlVariables.encounterDate=date.text+" "+hour.text+":"+min.text;
				for(var i:int  =1;i<6;i++){
					var tempText:TextInput=this["measurementId"+i] as TextInput;
					urlVariables[tempText.name]=tempText.text;
				}
				return urlVariables;				
			}
			
			protected function vtask1_creationCompleteHandler(event:FlexEvent):void
			{
				if(inputVariables!=null )
				{					
					testList=inputVariables.testList.test;
					if(testList!=null && testList.length()>0)
					{
						for each(var test:Object in testList)
						{
							if(test.name=="ELEC"){
								obj=test;
								date.text=obj.date;
								var i:int=1;
								for each(var object:Object in obj.measurementList.measurement)
								{
									var tempText:TextInput=null;
									tempText=this["measurementId"+i] as TextInput;
									tempText.text=object.measurementValue;
									i++;
								}
								
							}
						}
					}	
				}
				
				// TODO Auto-generated method stub
			}
			
			private function validateForm():Boolean{
				var returnVal:Boolean=true;
				for(var i:int=1;i<6;i++){
					var obj:Object=this["measurementId"+i];
					if(validateObjectCount(obj)){
						continue ;
					}
					else{
						return false;
					}
				}
				var obj:Object=this['date'];
				if(dateObject_focusOutHandler(obj)){
					return true;
				}
				else{
					return false;
				}
				return returnVal;
			}
			
			
			protected function validateCount(event:FocusEvent):void{
				
				var obj:Object=event.currentTarget;
				if(isFieldEntered(obj)){
					validateObjectCount(obj);
				}
			}
			
			
			protected function validNumbers(event:FocusEvent):void
			{
				var obj:Object=event.currentTarget;
				if(isFieldEntered(obj)){
					validNumberObject(obj);
				}
			}
			
			protected function date_focusOutHandler(event:FocusEvent):void
			{
				var obj:Object=event.currentTarget;
				if(isFieldEntered(obj)){
					dateObject_focusOutHandler(obj);
				}
			}			
			
			protected function validateObjectCount(object:Object):Boolean{
				
				if(isFieldEntered(object)){
					genNumber.source=object;
					genNumber.property="text";
					var varresult:ValidationResultEvent=null;
					varresult=genNumber.validate();
					if(varresult.type==ValidationResultEvent.INVALID){
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=true;
						img.myError="Please enter the field in Number[XX.xx]";
						var errorTip:ToolTip=new ToolTip();
						errorTip.x=object.x;
						errorTip.y=object.y;
						img.errorTip=errorTip;
						errorMessageFormFields.visible=true;
						
						return false;
					}
					else{
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=false;
						object.errorString=null;
						if(isFormValid()){
							errorMessageFormFields.visible=false;
						}	
						return true;
					}
				}
				else{
					return false;	
				}
				return true;
			}
			
			
			private function isFormValid():Boolean{
				
				for(var i:int=1;i<6;i++){
					var tempText:TextInput=this["measurementId"+i] as TextInput;
					if(tempText.errorString=="Error"){
						return false;
					}
					
				}
				var tempDate:DateField=this["date"] as DateField;
				if(tempDate.errorString!=null){
					return false;	
				}
				return true;
			}
			
			protected function isFieldEntered(object:Object):Boolean{
				
				requiredValidator.source=object;
				requiredValidator.property="text";
				var varresult:ValidationResultEvent=null; 
				varresult=requiredValidator.validate();
				if(varresult.type==ValidationResultEvent.INVALID){
					var img:gifImage= this[object.name+'Error'] as gifImage;
					img.visible=true;
					errorMessageFormFields.visible=true;
					object.errorString="Error";
					
					img.myError="Please enter the required Field";
					var errorTip:ToolTip=new ToolTip();
					errorTip.x=object.x;
					errorTip.y=object.y;
					img.errorTip=errorTip;
					
					/* 					errorTip.height=50; */
					
					
					return false;
				}else{
					var img:gifImage= this[object.name+'Error'] as gifImage;
					img.visible=false;
					object.errorString=null;
					if(isFormValid()){
						errorMessageFormFields.visible=false;
					}	
					return true;
				}
				return true;
			}
			
			protected function validNumberObject(object:Object):Boolean{
				
				if(isFieldEntered(object)){
					percentValidator.source=object;
					percentValidator.property="text";
					var varresult:ValidationResultEvent=null;
					varresult=percentValidator.validate();
					if(varresult.type==ValidationResultEvent.INVALID)
					{
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=true;
						object.errorString="Error";
						img.myError="Please enter the value in percentage[00.00-100.00]";
						var errorTip:ToolTip=new ToolTip();
						errorTip.x=object.x;
						errorTip.y=object.y;
						img.errorTip=errorTip;	
						errorTip.width=160;
						errorMessageFormFields.visible=true;
						return false;
					}else if(varresult.type==ValidationResultEvent.VALID){
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=false;
						object.errorString=null;
						if(isFormValid()){
							errorMessageFormFields.visible=false;
						}	
						return true;
					}
					
				}
				else{
					return false;
				} 
				return true;
			}
			
			
			
			
			protected function dateObject_focusOutHandler(object:Object):Boolean
			{
				
				if(isFieldEntered(object)){
					dateValidator.source=object;
					dateValidator.property="text";
					var varresult:ValidationResultEvent=null;
					varresult=dateValidator.validate();
					if(varresult.type==ValidationResultEvent.INVALID){
						var date:DateField= object as DateField;
						date.toolTip="Please enter the date in MM-dd-YYYY format";
						object.errorString="Error";
						
						return false;
					}else if(varresult.type==ValidationResultEvent.VALID){
						var img:gifImage= this[object.name+'Error'] as gifImage;
						img.visible=false;
						object.errorString=null;
						if(isFormValid()){
							errorMessageFormFields.visible=false;
						}
						return true;
					}
					
				}
				return true;
			}
			
			
			protected function mouseOverHandler(event:MouseEvent):void
			{
				var obj:gifImage=event.currentTarget as gifImage;
				obj.errorTip = ToolTipManager.createToolTip(
					obj.myError, obj.errorTip.x, obj.errorTip.y) as ToolTip; 
				obj.errorTip.setStyle("styleName", "errorTip");
				
				/* errorTip.height=50;
				errorTip.width=130; */
				
				// TODO Auto-generated method stub
			}
			
			
			protected function mouseOutHandler(event:MouseEvent):void
			{
				var obj:gifImage=event.currentTarget as gifImage;
				ToolTipManager.destroyToolTip(obj.errorTip);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberValidator id="percentValidator" minValue="0" maxValue="100" precision="2"/>
		<mx:NumberValidator id="genNumber" triggerEvent="" precision="2"></mx:NumberValidator>	
		<mx:StringValidator id="requiredValidator"/>
		<mx:DateValidator id="dateValidator" inputFormat="mm-dd-yyyy" allowedFormatChars="-" />
	</fx:Declarations>
	
	
	<s:Rect width="480" height="100%">
		<s:fill>
			<s:SolidColor color="#000000"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect x="10" y="11" width="459" height="731" radiusX="20" radiusY="20">
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<components:gifImage id="dateError" x="269" y="146" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="NaError" x="400" y="216" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="KError" x="400" y="253" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="ClError" x="400" y="289" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="CO2Error" x="400" y="331" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="Total_CalciumError" x="400" y="368" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<components:gifImage id="Ionized_CalciumError" x="400" y="404" width="34" height="30" imgSrc="../assets/ar_a_red3sm.gif" visible="false" mouseOver="mouseOverHandler(event)" mouseOut="mouseOutHandler(event)"/>
	<s:TextInput name="Na" id="measurementId1"  x="171" y="211" width="79" height="35" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" fontFamily="Arial"  focusOut="validateCount(event)"/>
	<s:Label x="26" y="331" width="211" height="35" color="#0B0A0A" text="CO2:"/>
	<s:TextInput name="CO2" id="measurementId4" x="173" y="328" width="77" height="35" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" fontFamily="Arial" focusOut="validateCount(event)"/>
	<s:Label x="26" y="374" color="#0B0A0A" text="Total calcium:"/>
	<s:TextInput name="Total_Calcium" id="measurementId5" x="174" y="364" width="76" height="35" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" fontFamily="Arial" focusOut="validateCount(event)"/>
	<s:Label x="26" y="413" color="#0B0A0A" text="Ionized calcium:"/>
	<s:TextInput name="Ionized_Calcium" id="measurementId6" x="175" y="400" width="75" height="35" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" fontFamily="Arial" focusOut="validateCount(event)"/>
	<s:Label x="258" y="340" color="#0B0A0A" text="mmol/L"/>
	<s:Label x="260" y="370" color="#0B0A0A" text="mg/dL"/>
	<s:Label x="27" y="219" color="#0B0A0A" text="Na:"/>
	<s:Label x="254" y="219" color="#0B0A0A" text="mmol/L"/>
	<s:Label x="27" y="259" color="#0B0A0A" text="K:"/>
	<s:TextInput name="K" id="measurementId2" x="170" y="249" width="79" height="35" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" fontFamily="Arial" focusOut="validateCount(event)"/>
	<s:Label x="256" y="256" color="#0B0A0A" text="mmol/L"/>
	<s:Label x="27" y="292" color="#0B0A0A" text="CL:"/>
	<s:TextInput name="Cl" id="measurementId3" x="171" y="288" width="79" height="35" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" fontFamily="Arial" focusOut="validateCount(event)"/>
	<s:Label x="256" y="300" color="#0B0A0A" text="mmol/L"/>
	<s:Label x="263" y="410" color="#0B0A0A" text="mmol/L"/>
	<s:Label x="17" y="155" color="#0B0A0A" fontSize="15" fontStyle="normal"
			 text="Date:" />
	<s:Label x="306" y="155" height="19" color="#0B0A0A" fontSize="15" fontStyle="normal" text="Time:" />
	<mx:ComboBox id="hour" x="354" y="146" width="53" height="32" chromeColor="#FFFFFF"
				 color="#0B0A0A" contentBackgroundColor="#FFFFFF" dataProvider="{hourList}"
				 selectedIndex="0" text="{obj.hour}"/>
	<mx:ComboBox id="min" x="410" y="146" width="53" height="32" chromeColor="#FFFFFF" color="#0B0A0A"
				 contentBackgroundColor="#FFFFFF" dataProvider="{minList}" selectedIndex="0"
				 text="{obj.min}"/>
	<mx:DateField id="date" name="date"  x="59" y="150" width="163" color="#0B0A0A"
				  contentBackgroundColor="#FFFFFF" formatString="MM-DD-YYYY" focusOut="date_focusOutHandler(event)"/>
	<mx:MenuBar x="20" y="22" width="433" height="102" chromeColor="#0F0E0E"
				click="nextPageHandler('babyTests');" color="#FBFBFD" cornerRadius="0"
				selectionColor="#FFFFFF"></mx:MenuBar>
	<s:Label x="194" y="59" color="#FCFCFC" fontFamily="Arial" fontSize="22" text="Electrolytes"/>
	<s:Image x="44" y="43" width="52" height="47" source="../assets/downicon.jpg"/>
	<components:BackButton x="25" y="491" width="101" height="63" click="nextPageHandler('back');"/>
	<components:SubmitButton x="345" y="493" width="110" height="61"
							 click="button2_clickHandler(event);"/>
	<s:Label id="errorMessageFormFields" x="27" y="130" color="#FF0202" fontSize="14" text="Invalid/Incomplete data has been entered" visible="false"/>
</views2:vTask>
